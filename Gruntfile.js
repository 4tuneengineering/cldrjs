module.exports = function(grunt) {

	"use strict";

	var rdefineEnd = /\}\);[^}\w]*$/,
		pkg = grunt.file.readJSON( "package.json" );

	function camelCase( input ) {
		return input.toLowerCase().replace( /[_/](.)/g, function( match, group1 ) {
			return group1.toUpperCase();
		});
	}

	function mountFolder( connect, path ) {
		return connect.static( require( "path" ).resolve( path ) );
	}

	function replaceConsts( content ) {
		return content

			// Replace Version
			.replace( /@VERSION/g, pkg.version )

			// Replace Date yyyy-mm-ddThh:mmZ
			.replace( /@DATE/g, ( new Date() ).toISOString().replace( /:\d+\.\d+Z$/, "Z" ) );
	}

	grunt.initConfig({
		pkg: pkg,
		connect: {
			options: {
				port: 9001,
				hostname: "localhost"
			},
			test: {
				options: {
					middleware: function ( connect ) {
						return [
							mountFolder( connect, "." ),
							mountFolder( connect, "test" )
						];
					}
				}
			}
		},
		jshint: {
			source: {
				src: [ "src/**/*.js", "!src/build/**" ],
				options: {
					jshintrc: "src/.jshintrc"
				}
			},
			grunt: {
				src: [ "Gruntfile.js" ],
				options: {
					jshintrc: ".jshintrc"
				}
			},
			test: {
				src: [ "test/**/*.js" ],
				options: {
					jshintrc: "test/.jshintrc"
				}
			},
			dist: {
				src: [ "dist/cldr.js", "dist/cldr.runtime.js" ],
				options: {
					jshintrc: "src/.dist_jshintrc"
				}
			}
		},
		mocha: {
			all: {
				options: {
					urls: [ "http://localhost:<%= connect.options.port %>/index.html" ]
				}
			}
		},
		requirejs: {
			options: {
				dir: "dist/.build",
				appDir: "src",
				baseUrl: ".",
				optimize: "none",
				skipSemiColonInsertion: true,
				skipModuleInsertion: true,
				wrap: {
					startFile: "src/build/intro.js",
					endFile: "src/build/outro.js"
				},

				// Strip all definitions generated by requirejs.
				// Convert content as follows:
				// a) "Single return" means the module only contains a return statement that is converted to a var declaration.
				// b) "Not as simple as a single return" means the define wrappers are replaced by a function wrapper call and the returned value is assigned to a var.
				// c) "Main" means the define wrappers are removed, but content is untouched. Only for main and main.runtime.
				onBuildWrite: function ( id, path, contents ) {
					var name = id
						.replace(/util\//, "");

					// 1, and 2: Remove define() wrap.
					// 3: Remove empty define()'s.
					contents = contents
						.replace( /define\([^{]*?{/, "" ) /* 1 */
						.replace( rdefineEnd, "" ) /* 2 */
						.replace( /define\(\[[^\]]+\]\)[\W\n]+$/, "" ); /* 3 */

					// Type b (not as simple as a single return)
					if ( [ "item/lookup", "util/json/merge" ].indexOf( id ) !== -1 ) {
						contents = "	var " + camelCase( name ) + " = (function() {" +
							contents + "}());";
					}
					// Type a (single return)
					else if ( !(/^main(\.runtime)?$/).test( id ) ) {
						contents = contents
							.replace( /	return/, "	var " + camelCase( name ) + " =" );
					}

					return contents;
				}
			},
			bundle: {
				options: {
					modules: [{
						name: "cldr",
						include: [ "main" ],
						create: true
					}, {
						name: "cldr.runtime",
						include: [ "main.runtime" ],
						create: true
					}]
				}
			}
		},
		copy: {
			options: {
				processContent: function( content ) {

					// Remove leftover define created during rjs build
					content = content.replace( /define\(".*/, "" );

					// Embed VERSION and DATE
					return replaceConsts( content );
				}
			},
			dist: {
				expand: true,
				cwd: "dist/.build/",
				src: [ "cldr.js", "cldr.runtime.js" ],
				dest: "dist/"
			}
		},
		uglify: {
			options: {
				banner: replaceConsts( grunt.file.read( "src/build/intro.min.js" ) )
			},
			dist: {
				files: {
					"dist/cldr.min.js": [ "dist/cldr.js" ],
					"dist/cldr.runtime.min.js": [ "dist/cldr.runtime.js" ],
				}
			}
		}
	});

	require( "matchdep" ).filterDev( "grunt-*" ).forEach( grunt.loadNpmTasks );

	grunt.registerTask( "test", [
		"connect:test",
		"mocha"
	]);

	grunt.registerTask( "default", [
		"jshint:grunt:source:test",
		"test",
		"requirejs",
		"copy:dist",
		"jshint:dist",
		"uglify"
	]);

};

